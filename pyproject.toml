# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

# Build
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/aiperf/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "aiperf"
version = "0.1.1"
description = "AIPerf is a package for performance testing of AI models"
readme = "README.md"
license = {text = "Apache-2.0"}
license-files = ["LICENSE"]
authors = [
    { name = "NVIDIA Inc.", email = "sw-dl-dynamo@nvidia.com" },
]
requires-python = ">=3.10"
dependencies = [
  "aiofiles~=24.1.0",
  "aiohttp~=3.12.14",
  "cyclopts>=3,<4",
  "ffmpeg-python~=0.2.0",
  "numpy~=1.26.4",
  "orjson~=3.10.18",
  "pillow~=11.1.0",
  "prometheus_client~=0.23.1",
  "psutil~=7.0.0",
  "pydantic~=2.11.4",
  "pydantic-settings~=2.10.0",
  "pyzmq~=26.4.0",
  "rich~=14.1.0",
  "ruamel.yaml~=0.18.12",
  "setproctitle~=1.3.6",
  "soundfile~=0.13.1",
  "textual~=5.3.0",
  "tqdm>=4.67.1",
  "transformers>=4.52.0",
  "uvloop~=0.21.0",
]

# CLI Entrypoints
[project.scripts]
aiperf = "aiperf.__main__:main"

[project.optional-dependencies]
dev = [
  "black>=25.1.0",
  "httpx>=0.27.0",
  "mkinit>=1.1.0",
  "pre-commit>=4.2.0",
  "pytest-asyncio",
  "pytest-cov",
  "pytest>=7.0.0",
  "pytest-xdist>=3.8.0",
  "ruff>=0.0.0",
  "scipy>=1.13.0",
]

[tool.ruff]
# Base settings for ruff
line-length = 88
indent-width = 4
exclude = ["__pycache__", "build", "dist", ".venv", "venv"]

[tool.ruff.lint]
select = [
    # pycodestyle (except E501)
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
# Ignore line length errors, ruff format will handle this but
# can have some lines that are slightly over due to the way formatting works
ignore = ["E501"]

[tool.pytest.ini_options]
# Basic pytest configuration
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "integration: marks tests as integration tests (deselected by default)",
    "performance: marks tests as performance tests (deselected by default)",
    "ffmpeg: marks tests that require ffmpeg to be installed (deselected by default)",
    "stress: marks tests as stress tests that generate high load (deselected by default)",
    "macos: marks tests as macOS-specific tests (deselected by default)",
]
# Better console output
console_output_style = "progress"
verbosity_assertions = 2
# Show extra test summary info
# Deselect integration, performance, ffmpeg, and stress tests by default
# To run them: pytest -m integration, pytest -m performance, pytest -m ffmpeg, pytest -m stress
# IDE note: When running a specific test file/function from IDE, markers are often bypassed
addopts = "--strict-markers -m 'not integration and not performance and not ffmpeg and not stress and not macos'"

[tool.codespell]
skip = "*.pyc,*build*,tests/transports/test_aiohttp_sse.py"
